#!/bin/zsh

# researchsdk
# Copyright 2024 Guilherme Rambo (github.com/insidegui)
# See LICENSE file for details

echo ""

function echoRed {
    echo "\033[0;31m$1\033[0m"
}
function echoYellow {
    echo "\033[0;33m$1\033[0m"
}
function echoGreen {
    echo "\033[0;32m$1\033[0m"
}

# Allow SDK name to be passed as an argument, use iphoneos as default
if [ -z "$1" ]
then
    INPUT_SDK_NAME="iphoneos"
else
    INPUT_SDK_NAME="$1"
fi

INPUT_SDK_PATH_SYMLINK=$(xcrun --show-sdk-path --sdk $INPUT_SDK_NAME)

# Resolve symlink
INPUT_SDK_PATH=$(realpath "$INPUT_SDK_PATH_SYMLINK")

if [ ! -d "$INPUT_SDK_PATH" ]; then
    echoRed "Input SDK does not exist at $INPUT_SDK_PATH"
    echo ""
    exit 1
fi

INPUT_SDK_PATH_NO_EXT=${INPUT_SDK_PATH%.sdk}
INPUT_SDK_PATH_SYMLINK_NO_EXT=${INPUT_SDK_PATH_SYMLINK%.sdk}

RESEARCH_SDK_PATH_SYMLINK="$INPUT_SDK_PATH_SYMLINK_NO_EXT.internal.sdk"
RESEARCH_SDK_PATH="$INPUT_SDK_PATH_NO_EXT.internal.sdk"

echo "Input SDK symlink is at $INPUT_SDK_PATH_SYMLINK"
echo "Input SDK is at $INPUT_SDK_PATH"
echo "Research SDK will be created at $RESEARCH_SDK_PATH"
echo "Research SDK symlink will be created at $RESEARCH_SDK_PATH_SYMLINK"

echo ""

if [ -d "$RESEARCH_SDK_PATH" ]; then
    echoRed "Research SDK already exists at $RESEARCH_SDK_PATH, please remove it before running this script"
    echo ""
    exit 1
fi

# Automatically continue in 5 seconds
echo ""
echoYellow "Press any key to continue, Ctrl+C to cancel..."
read

echo ""

echo "Creating Research SDK at $RESEARCH_SDK_PATH"

cp -cr "$INPUT_SDK_PATH" "$RESEARCH_SDK_PATH"

if [ ! -d "$RESEARCH_SDK_PATH" ]
then
    echo "Failed to copy SDK"
    echo ""
    exit 1
fi

echo "Creating Research SDK symlink at $RESEARCH_SDK_PATH_SYMLINK"

ln -s "$RESEARCH_SDK_PATH" "$RESEARCH_SDK_PATH_SYMLINK"

# Ensure the jj command-line tool is available
if ! command -v jj &> /dev/null
then
    echo "jj could not be found; it can be installed with 'brew install tidwall/jj/jj'"
    echo ""
    exit 1
fi

echo ""
echo "Research SDK will be available at $RESEARCH_SDK_PATH"
echo ""

SETTINGS_JSON_PATH="$RESEARCH_SDK_PATH/SDKSettings.json"
SETTINGS_PLIST_PATH="$RESEARCH_SDK_PATH/SDKSettings.plist"

function setJSONProperty {
    KEY=$1
    VALUE=$2

    ORIGINAL_VALUE=$(jj -i "$SETTINGS_JSON_PATH" "$KEY")

    if [ -z "$ORIGINAL_VALUE" ]
    then
        echo "$KEY key not found in SDKSettings.json"
        echo ""
        exit 1
    fi

    if ! [[ $ORIGINAL_VALUE == "$VALUE" ]]; then
        echo "Setting $KEY to '$VALUE'"

        jj -i "$SETTINGS_JSON_PATH" -v "$VALUE" -O "$KEY" -o "$SETTINGS_JSON_PATH"
    else
        echo "$KEY is already '$ORIGINAL_VALUE'"
    fi
}

function appendStringToJSONProperty {
    KEY=$1
    VALUE=$2

    ORIGINAL_VALUE=$(jj -i "$SETTINGS_JSON_PATH" "$KEY")

    if [ -z "$ORIGINAL_VALUE" ]
    then
        echo "$KEY key not found in SDKSettings.json"
        echo ""
        exit 1
    fi

    if ! [[ $ORIGINAL_VALUE == *"$VALUE"* ]]; then
        UPDATED_VALUE="$ORIGINAL_VALUE$VALUE"

        setJSONProperty "$KEY" "$UPDATED_VALUE"
    else
        echo "$KEY is already '$ORIGINAL_VALUE'"
    fi
}

function setPlistProperty {
    KEY=$1
    VALUE=$2

    ORIGINAL_VALUE=$(/usr/libexec/PlistBuddy -c "Print $KEY" "$SETTINGS_PLIST_PATH")

    if [ -z "$ORIGINAL_VALUE" ]
    then
        echo "$KEY key not found in SDKSettings.plist"
        echo ""
        exit 1
    fi

    if ! [[ $ORIGINAL_VALUE == "$VALUE" ]]; then
        echo "Setting $KEY to '$VALUE'"

        /usr/libexec/PlistBuddy -c "Set $KEY $VALUE" "$SETTINGS_PLIST_PATH"
    else
        echo "$KEY is already '$ORIGINAL_VALUE'"
    fi
}

function appendStringToPlistProperty {
    KEY=$1
    VALUE=$2

    ORIGINAL_VALUE=$(/usr/libexec/PlistBuddy -c "Print $KEY" "$SETTINGS_PLIST_PATH")

    if [ -z "$ORIGINAL_VALUE" ]
    then
        echo "$KEY key not found in SDKSettings.plist"
        echo ""
        exit 1
    fi

    if ! [[ $ORIGINAL_VALUE == *"$VALUE"* ]]; then
        UPDATED_VALUE="$ORIGINAL_VALUE$VALUE"

        setPlistProperty "$KEY" "$UPDATED_VALUE"
    else
        echo "$KEY is already '$ORIGINAL_VALUE'"
    fi
}

# This fixes "duplicate module definition libxml2" error
rm -Rf "$RESEARCH_SDK_PATH/usr/include/libxml2" 2>/dev/null

if [[ "$INPUT_SDK_NAME" = "iphoneos" || "$INPUT_SDK_NAME" = "iphonesimulator" ]]; then
    echo "Removing all \"API_UNAVAILABLE(ios)\" tags from SDK headers..."

    find "$RESEARCH_SDK_PATH" -type f -name "*.h" -exec sed -i '' '/API_UNAVAILABLE(ios)/d' {} \;

    echo ""

    echo "Making libSwiftXPC API available on iOS..."

    # Remove the "/@available(iOS, unavailable)" annotations from the XPC Swift module
    find "$RESEARCH_SDK_PATH/usr/lib/swift/XPC.swiftmodule" -type f -name '*.swiftinterface' -exec sed -i '' '/@available(iOS, unavailable)/d' {} \;

    # Add availability annotation for iOS where needed
    find "$RESEARCH_SDK_PATH/usr/lib/swift/XPC.swiftmodule" -type f -name '*.swiftinterface' -exec sed -i '' 's/@available(macOS 14.0, macCatalyst 17.0, \*)/@available(macOS 14.0, macCatalyst 17.0, iOS 17.0, \*)/g' {} \;

    echo ""
fi

echo "## SDKSettings.json"
echo ""
appendStringToJSONProperty "DisplayName" " (Research)"
# I tried using ".research" as the suffix, but Xcode will only recognize ".internal"
appendStringToJSONProperty "CanonicalName" ".internal"
setJSONProperty "DefaultProperties.ENTITLEMENTS_REQUIRED" "NO"
setJSONProperty "DefaultProperties.AD_HOC_CODE_SIGNING_ALLOWED" "YES"
setJSONProperty "DefaultProperties.CODE_SIGNING_REQUIRED" "NO"
setJSONProperty "DefaultProperties.CODE_SIGN_IDENTITY" "-"

echo ""

echo "## SDKSettings.plist"
echo ""

appendStringToPlistProperty "DisplayName" " (Research)"
# I tried using ".research" as the suffix, but Xcode will only recognize ".internal"
appendStringToPlistProperty "CanonicalName" ".internal"
setPlistProperty ":DefaultProperties:ENTITLEMENTS_REQUIRED" "NO"
setPlistProperty ":DefaultProperties:AD_HOC_CODE_SIGNING_ALLOWED" "YES"
setPlistProperty ":DefaultProperties:CODE_SIGNING_REQUIRED" "NO"
setPlistProperty ":DefaultProperties:CODE_SIGN_IDENTITY" "-"

echo ""

echoGreen "Research SDK created successfully"

echo ""

echo "You can copy and paste the following into your project settings to enable the new SDK:"
echo ""
echo "SDKROOT = '$RESEARCH_SDK_PATH'"
echo ""